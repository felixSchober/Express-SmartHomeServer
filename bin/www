#!/usr/bin/env node
'use strict'

console.log('[SERVER - JS] Starting Express Node AppServer.');

//module dependencies
const server = require('../dist/AppServer');
const debug = require('debug')('express:server');


//create http server
const httpPort = normalizePort(process.env.PORT || 8080);

console.log('[SERVER - JS] Using ' + httpPort + ' as port.');
console.log('[SERVER - JS] Bootstrapping Typescript server component.');

const appServer = server.AppServer.bootstrap();
const app = appServer.app;
const httpServer = appServer.server;

console.log('[SERVER - JS] Bootstrapping Typescript server component complete.');


app.set('port', httpPort);
//listen on provided ports
httpServer.listen(httpPort);
//add error handler
httpServer.on('error', onError);
//start listening on port
httpServer.on('listening', onListening);


console.log('################################# INITIALISATION FINISHED ################################\n')

console.log('[SERVER - JS] AppServer is listening on port ' + httpPort + '. Startup complete.');


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	const port = parseInt(val, 10)
	if (isNaN(port)) {
		// named pipe
		return val
	}
	if (port >= 0) {
		// port number
		return port
	}
	return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error
	}
	const bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges')
			process.exit(1)
			break
		case 'EADDRINUSE':
			console.error(bind + ' is already in use')
			process.exit(1)
			break
		default:
			throw error
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	const addr = httpServer.address()
	const bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port
	debug('Listening on ' + bind)
}